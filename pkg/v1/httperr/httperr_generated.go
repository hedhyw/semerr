// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package httperr

import (
	"errors"
	"net/http"

	"github.com/hedhyw/semerr/pkg/v1/semerr"
)

// Code returns http status code for err. In case of joined errors
// it returns the first code found in the chain.
func Code(err error) int {
	switch {
	case err == nil:
		return http.StatusOK
	case errors.As(err, &semerr.StatusRequestTimeoutError{}):
		return 408
	case errors.As(err, &semerr.InternalServerError{}):
		return 500
	case errors.As(err, &semerr.BadRequestError{}):
		return 400
	case errors.As(err, &semerr.UnsupportedMediaTypeError{}):
		return 415
	case errors.As(err, &semerr.StatusGatewayTimeoutError{}):
		return 504
	case errors.As(err, &semerr.NotFoundError{}):
		return 404
	case errors.As(err, &semerr.ConflictError{}):
		return 409
	case errors.As(err, &semerr.ForbiddenError{}):
		return 403
	case errors.As(err, &semerr.TooManyRequestsError{}):
		return 429
	case errors.As(err, &semerr.RequestEntityTooLargeError{}):
		return 413
	case errors.As(err, &semerr.UnimplementedError{}):
		return 501
	case errors.As(err, &semerr.ServiceUnavailableError{}):
		return 503
	case errors.As(err, &semerr.UnauthorizedError{}):
		return 401
	default:
		return http.StatusInternalServerError
	}
}

// Wrap wraps the `err` with an error corresponding to the `code`.
// If there is no `err` for this code then the `err` will be returned
// without wrapping.
func Wrap(err error, code int) error {
	switch code {
	case 408:
		return semerr.NewStatusRequestTimeoutError(err)
	case 500:
		return semerr.NewInternalServerError(err)
	case 400:
		return semerr.NewBadRequestError(err)
	case 504:
		return semerr.NewStatusGatewayTimeoutError(err)
	case 404:
		return semerr.NewNotFoundError(err)
	case 409:
		return semerr.NewConflictError(err)
	case 403:
		return semerr.NewForbiddenError(err)
	case 429:
		return semerr.NewTooManyRequestsError(err)
	case 413:
		return semerr.NewRequestEntityTooLargeError(err)
	case 501:
		return semerr.NewUnimplementedError(err)
	case 503:
		return semerr.NewServiceUnavailableError(err)
	case 401:
		return semerr.NewUnauthorizedError(err)
	default:
		return err
	}
}
