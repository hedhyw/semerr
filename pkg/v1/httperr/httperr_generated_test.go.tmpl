// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package httperr_test

import (
	"errors"
	"fmt"
	"net/http"
	"testing"

	"github.com/hedhyw/semerr/pkg/v1/httperr"
	"github.com/hedhyw/semerr/pkg/v1/semerr"
)

func TestCode(t *testing.T) {
	t.Parallel()

	const err = semerr.Error("some error")

	testCases := []struct {
		Err  error
		Code int
	}{
		{
			Err:  nil,
			Code: http.StatusOK,
		},
		{
			Err:  err,
			Code: http.StatusInternalServerError,
		},
		{{- range $errorDef := . }}
		{
			Err:  semerr.New{{ $errorDef.Name }}(err),
			Code: {{ $errorDef.HTTPStatus }},
		},
		{{- end }}
	}

	for _, tc := range testCases {
		tc := tc

		t.Run(fmt.Sprint(tc.Err), func(t *testing.T) {
			t.Parallel()

			err := tc.Err
			gotCode := httperr.Code(err)
			if tc.Code != gotCode {
				t.Fatal("exp", tc.Code, "got", gotCode)
			}

			if err != nil {
				err = fmt.Errorf("wrapped: 1: %w", err)
				err = fmt.Errorf("wrapped: 2: %w", err)
				gotCode = httperr.Code(err)
				if tc.Code != gotCode {
					t.Fatal("exp", tc.Code, "got", gotCode)
				}
			}
		})
	}
}

func TestWrap(t *testing.T) {
	t.Parallel()

	const err = semerr.Error("some error")

	testCases := []struct {
		Code  int
		Check func(err error) bool
	}{
		{
			Check: func(actualErr error) bool {
				return err == actualErr
			},
			Code: -1,
		},
		{{- range $errorDef := . }}
		{{- if $errorDef.Reverse }}
		{
			Check: func(err error) bool {
				return errors.As(err, &semerr.{{ $errorDef.Name }}{})
			},
			Code:   {{ $errorDef.HTTPStatus }},
		},
		{{- end }}
		{{- end }}
	}

		for _, tc := range testCases {
		tc := tc

		t.Run(fmt.Sprint(tc.Code), func(t *testing.T) {
			t.Parallel()

			if err := httperr.Wrap(err, tc.Code); !tc.Check(err) {
				t.Fatalf("%T", err)
			}
		})
	}
}