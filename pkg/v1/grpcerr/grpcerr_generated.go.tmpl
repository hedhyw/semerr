// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package grpcerr

import (
	"errors"

	"github.com/hedhyw/semerr/pkg/v1/semerr"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Code returns grpc status code for err. In case of joined errors
// it returns the first code found in the chain.
func Code(err error) codes.Code {
	switch {
	case err == nil:
		return codes.OK
	{{- range $errorDef := . }}
	case errors.As(err, &semerr.{{ $errorDef.Name }}{}):
		return {{ $errorDef.GRPCStatus }}
	{{- end }}
	default:
		return getGRPCErrorCode(err)
	}
}

func getGRPCErrorCode(err error) codes.Code {
	var errGRPC interface {
		GRPCStatus() *status.Status
		error
	}

	if errors.As(err, &errGRPC) {
		status := errGRPC.GRPCStatus()

		if status == nil {
			return codes.Unknown
		}

		code := status.Code()
		if code != codes.OK && code != codes.Unknown {
			return code
		}
	}

	return codes.Unknown
}

// Wrap wraps the `err` with an error corresponding to the `code`.
// If there is no `err` for this code then the `err` will be returned
// without wrapping.
func Wrap(err error, code codes.Code) error {
	switch code {
	{{- range $errorDef := . }}
	{{- if $errorDef.Reverse }}
	case {{ $errorDef.GRPCStatus }}:
		return semerr.New{{ $errorDef.Name }}(err)
	{{- end }}
	{{- end }}
	default:
		return err
	}
}
