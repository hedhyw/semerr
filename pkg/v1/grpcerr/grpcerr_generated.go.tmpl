// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package grpcerr

import (
	"errors"

	"github.com/hedhyw/semerr/pkg/v1/semerr"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Code returns grpc status code for err.
func Code(err error) codes.Code {
	switch err.(type) {
	case nil:
		return codes.OK
	{{- range $errorDef := . }}
	case semerr.{{ $errorDef.Name }}:
		return {{ $errorDef.GRPCStatus }}
	{{- end }}
	}

	code := status.Code(err)
	if code != codes.OK && code != codes.Unknown {
		return code
	}

	if err = errors.Unwrap(err); err == nil {
		return codes.Unknown
	}

	return Code(err)
}

// Wrap wraps the `err` with an error corresponding to the `code`.
// If there is no `err` for this code then the `err` will be returned
// without wrapping.
func Wrap(err error, code codes.Code) error {
	switch code {
	{{- range $errorDef := . }}
	{{- if $errorDef.Reverse }}
	case {{ $errorDef.GRPCStatus }}:
		return semerr.New{{ $errorDef.Name }}(err)
	{{- end }}
	{{- end }}
	default:
		return err
	}
}
