// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package grpcerr_test

import (
	"fmt"
	"testing"

	"github.com/hedhyw/semerr/pkg/v1/grpcerr"
	"github.com/hedhyw/semerr/pkg/v1/semerr"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

func TestCode(t *testing.T) {
	t.Parallel()

	const err = semerr.Error("some error")

	testCases := []struct {
		Err  error
		Code codes.Code
	}{
		{
			Err:  nil,
			Code: codes.OK,
		},
		{
			Err:  err,
			Code: codes.Unknown,
		},
		{
			Err:  status.Error(codes.AlreadyExists, "already found"),
			Code: codes.AlreadyExists,
		},
		{
			Err:  semerr.NewBadRequestError(err),
			Code: 3,
		},
		{
			Err:  semerr.NewConflictError(err),
			Code: 6,
		},
		{
			Err:  semerr.NewForbiddenError(err),
			Code: 7,
		},
		{
			Err:  semerr.NewInternalServerError(err),
			Code: 2,
		},
		{
			Err:  semerr.NewNotFoundError(err),
			Code: 5,
		},
		{
			Err:  semerr.NewServiceUnavailableError(err),
			Code: 14,
		},
		{
			Err:  semerr.NewUnauthorizedError(err),
			Code: 16,
		},
	}

	for _, tc := range testCases {
		tc := tc

		t.Run(fmt.Sprint(tc.Err), func(t *testing.T) {
			t.Parallel()

			gotCode := grpcerr.Code(tc.Err)
			if tc.Code != gotCode {
				t.Fatal("exp", tc.Code, "got", gotCode)
			}
		})
	}
}
