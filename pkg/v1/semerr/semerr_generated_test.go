// Code generated by "github.com/hedhyw/semerr"; DO NOT EDIT.

package semerr_test

import (
	"errors"
	"strings"
	"testing"

	"github.com/hedhyw/semerr/pkg/v1/semerr"
)

func TestWrappedErrors(t *testing.T) {
	t.Parallel()

	const err semerr.Error = "error"

	testCases := []struct {
		Name      string
		Create    func(err error) error
		Temporary bool
	}{
		{
			Name:      "StatusRequestTimeoutError",
			Create:    semerr.NewStatusRequestTimeoutError,
			Temporary: true,
		},
		{
			Name:      "InternalServerError",
			Create:    semerr.NewInternalServerError,
			Temporary: false,
		},
		{
			Name:      "BadRequestError",
			Create:    semerr.NewBadRequestError,
			Temporary: false,
		},
		{
			Name:      "UnsupportedMediaTypeError",
			Create:    semerr.NewUnsupportedMediaTypeError,
			Temporary: false,
		},
		{
			Name:      "StatusGatewayTimeoutError",
			Create:    semerr.NewStatusGatewayTimeoutError,
			Temporary: true,
		},
		{
			Name:      "NotFoundError",
			Create:    semerr.NewNotFoundError,
			Temporary: false,
		},
		{
			Name:      "ConflictError",
			Create:    semerr.NewConflictError,
			Temporary: false,
		},
		{
			Name:      "ForbiddenError",
			Create:    semerr.NewForbiddenError,
			Temporary: false,
		},
		{
			Name:      "TooManyRequestsError",
			Create:    semerr.NewTooManyRequestsError,
			Temporary: false,
		},
		{
			Name:      "RequestEntityTooLargeError",
			Create:    semerr.NewRequestEntityTooLargeError,
			Temporary: false,
		},
		{
			Name:      "UnimplementedError",
			Create:    semerr.NewUnimplementedError,
			Temporary: false,
		},
		{
			Name:      "ServiceUnavailableError",
			Create:    semerr.NewServiceUnavailableError,
			Temporary: true,
		},
		{
			Name:      "UnauthorizedError",
			Create:    semerr.NewUnauthorizedError,
			Temporary: false,
		},
	}

	for _, tc := range testCases {
		tc := tc

		t.Run(tc.Name, func(t *testing.T) {
			t.Parallel()

			errWrapped := tc.Create(err)
			switch {
			case !strings.HasSuffix(tc.Name, "Error"):
				t.Fatal(tc.Name)
			case tc.Create(nil) != nil:
				t.Fatal()
			case errWrapped.Error() != err.Error():
				t.Fatal("exp", err.Error(), "got", errWrapped.Error())
			case !errors.Is(errWrapped, err):
				t.Fatal()
			case semerr.IsTemporaryError(errWrapped) != tc.Temporary:
				t.Fatal()
			}
		})
	}
}
